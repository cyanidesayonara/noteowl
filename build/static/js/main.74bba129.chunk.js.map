{"version":3,"sources":["components/Notification.js","components/FilterNotes.js","components/Note.js","components/Notes.js","services/notes.js","App.js","serviceWorker.js","index.js"],"names":["Notification","_ref","message","react_default","a","createElement","className","FilterNotes","filterValue","handleFilterChange","placeholder","value","onChange","Note","note","handleRemove","handleSubmit","handleInputChange","onSubmit","title","content","type","onClick","Notes","notes","map","components_Note","key","id","services_notes","getAll","axios","get","then","response","data","create","newObject","post","update","updatedObject","put","concat","remove","delete","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newNote","state","find","n","setState","author","date","important","saveNote","event","preventDefault","noteService","createdNote","filter","notification","setTimeout","catch","error","console","log","updatedNote","index","findIndex","newState","defineProperty","$set","window","confirm","removedNote","prop","target","_this2","document","_this3","toLowerCase","includes","components_FilterNotes","undefined","components_Notification","components_Notes","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.74bba129.chunk.js","sourcesContent":["import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      { message }\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react';\n\nconst FilterNotes = ({ filterValue, handleFilterChange }) => {\n  return (\n    <div>\n      <input\n        placeholder=\"Filter notes\"\n        value={ filterValue }\n        onChange={ handleFilterChange }\n      />\n    </div>\n  )\n}\n\nexport default FilterNotes","import React from 'react';\n\nconst Note = ({\n  note,\n  handleRemove,\n  handleSubmit,\n  handleInputChange,\n}) => {\n  return (\n    <div className='note'>\n      <form onSubmit={ handleSubmit(note) }>\n        <h3>\n          <input value={ note.title } placeholder=\"Title\" onChange={ handleInputChange('title', note) } />\n          { note.title }\n        </h3>\n        <p>\n          <textarea value={ note.content } placeholder=\"Add text here\" onChange={ handleInputChange('content', note) }>\n          </textarea>\n        </p>\n        <button type='submit'>\n          Save\n        </button>\n        <button type='button' onClick={ handleRemove(note) }>\n            Delete\n        </button>\n      </form>\n    </div>\n  )\n}\n\nexport default Note","import React from 'react';\nimport Note from './Note.js'\n\nconst Notes = ({\n  notes,\n  handleRemove,\n  handleSubmit,\n  handleInputChange\n}) => {\n  return (\n    <div>\n      { notes.map(note =>\n        <Note\n          key={ note.id }\n          note={ note }\n          handleRemove={ handleRemove }\n          handleSubmit={ handleSubmit }\n          handleInputChange={ handleInputChange }\n        />\n      ) }\n    </div>\n  )\n}\n\nexport default Notes","import axios from 'axios'\nconst baseUrl = '/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, updatedObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, updatedObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { Component } from 'react';\nimport Notification from './components/Notification.js'\nimport FilterNotes from './components/FilterNotes.js'\nimport Notes from './components/Notes.js'\nimport noteService from './services/notes.js'\nimport update from 'immutability-helper';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      notes: [],\n      filter: '',\n      notification: null\n    }\n  }\n\n  componentDidMount() {\n    document.title = 'NoteOwl'\n    noteService\n      .getAll()\n      .then(notes => {\n        this.setState({ notes: notes })\n      })\n  }\n\n  newNote = () => {\n    if (!this.state.notes.find(n => n.id === 0)) {\n      const note = {\n        id: 0,\n        title: '',\n        author: '',\n        content: '',\n        date: '',\n        important: false\n      }\n      this.setState({\n        notes: [note].concat(this.state.notes)\n      })\n    }\n  }\n\n  saveNote = (note) => (event) => {\n    event.preventDefault()\n    if (note.id === 0) {\n      noteService\n        .create(note)\n        .then(createdNote => {\n          const notes = this.state.notes.filter(n => n.id !== 0)\n          this.setState({\n            notes: [createdNote].concat(notes),\n            notification: 'Note saved'\n          })\n          setTimeout(() => {\n            this.setState({\n              notification: null\n            })\n          }, 3000)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    } else {\n      noteService\n        .update(note.id, note)\n        .then(updatedNote => {\n          const index = this.state.notes.findIndex(n => n.id === updatedNote.id)\n          const newState = update(this.state, {\n            notes: {\n              [index]: {\n                $set: updatedNote\n              }\n            }\n          })\n          this.setState({\n            newState,\n            notification: 'Note saved'\n          })\n          setTimeout(() => {\n            this.setState({\n              notification: null\n            })\n          }, 3000)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    }\n\n  }\n\n  handleRemove = (note) => () => {\n    if (window.confirm('Are you sure you want to remove this note?')) {\n      noteService\n        .remove(note.id)\n        .then(removedNote => {\n          const notes = this.state.notes.filter(n => n.id !== note.id)\n          this.setState({\n            notes: notes,\n            notification: 'Note deleted'\n          })\n          setTimeout(() => {\n            this.setState({ notification: null })\n          }, 3000)\n        })\n        .catch(error => {\n          console.log(error)\n          const notes = this.state.notes.filter(n => n.id !== note.id)\n          this.setState({\n            notes: notes,\n            notification: 'Failed to delete note'\n          })\n          setTimeout(() => {\n            this.setState({ notification: null })\n          }, 3000)\n        })\n    }\n  }\n\n  handleInputChange = (prop, note) => {\n    return (event) => {\n      const value = event.target.value\n      if (note) {\n        const index = this.state.notes.findIndex(n => n.id === note.id)\n        const newState = update(this.state, {\n          notes: {\n            [index]: {\n              [prop]: { $set: value }\n            }\n          }\n        })\n        this.setState(newState)\n      } else {\n        this.setState({ [prop]: value })\n      }\n    }\n  }\n\n  render() {\n    const notes = this.state.notes.filter(note =>\n      note.title.toLowerCase().includes(this.state.filter.toLowerCase()) ||\n      note.author.toLowerCase().includes(this.state.filter.toLowerCase()) ||\n      note.content.toLowerCase().includes(this.state.filter.toLowerCase())\n    )\n    return (\n      <div id=\"content\">\n        <nav>\n          <h1>\n            Noteowl\n          </h1>\n          <button onClick={ this.newNote }>\n            Add New Note\n          </button>\n          <FilterNotes\n            filterValue={ this.state.filter }\n            handleFilterChange={ this.handleInputChange('filter', undefined) }\n          />\n        </nav>\n        <div id=\"notes\">\n          <Notification\n            message={ this.state.notification }\n          />\n          <Notes\n            notes={ notes }\n            handleRemove={ this.handleRemove }\n            handleSubmit={ this.saveNote }\n            handleInputChange={ this.handleInputChange }\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}