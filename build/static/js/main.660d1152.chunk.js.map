{"version":3,"sources":["components/FilterNotes.js","components/Notification.js","components/Date.js","components/Delete.js","components/Note.js","components/Notes.js","services/notes.js","App.js","serviceWorker.js","index.js"],"names":["FilterNotes","_ref","filterValue","handleInputChange","react_default","a","createElement","className","placeholder","value","name","onChange","Notification","message","Date","date","dist_default","Delete","note","handleRemove","author","type","onClick","Note","handleDrag","saveNote","react_draggable_default","cancel","position","bounds","onStop","onDrag","components_Notification","notification","onSubmit","lib_default","onBlur","onResize","e","title","components_Date","content","components_Delete","Notes","notes","id","map","components_Note","key","services_notes","getAll","axios","get","then","response","data","create","post","update","put","concat","remove","delete","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hideNotification","setTimeout","index","state","findIndex","n","defineProperty","$set","setState","login","event","preventDefault","newNote","find","created","updated","important","x","y","noteService","createdNote","filter","catch","error","console","log","updatedNote","window","confirm","ui","deltaX","toFixed","deltaY","target","username","password","user","_this2","document","ReactGA","initialize","pageview","_this3","toLowerCase","includes","components_FilterNotes","components_Notes","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.660d1152.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst FilterNotes = ({ filterValue, handleInputChange }) => {\r\n  return (\r\n    <div className='d-none'>\r\n      <input\r\n        placeholder='Filter notes'\r\n        value={ filterValue }\r\n        name='filter'\r\n        onChange={ handleInputChange(null) }\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FilterNotes","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"notification\">\r\n      { message }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\nimport Moment from 'react-moment'\r\n\r\nconst Date = ({ date }) => {\r\n  if (date === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <Moment date={ date } />\r\n  )\r\n}\r\n\r\nexport default Date","import React from 'react'\r\n\r\nconst Delete = ({\r\n  note,\r\n  handleRemove,\r\n}) => {\r\n  if (note.author !== '') {\r\n    return null\r\n  }\r\n  return (\r\n    <button type='button' onClick={ handleRemove(note) }>\r\n      Delete\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Delete","import React from 'react'\r\nimport TextareaAutosize from 'react-autosize-textarea'\r\nimport Draggable from 'react-draggable'\r\nimport Notification from './Notification'\r\nimport Date from './Date'\r\nimport Delete from './Delete'\r\n\r\nconst Note = ({\r\n  note,\r\n  handleRemove,\r\n  handleDrag,\r\n  saveNote,\r\n  handleInputChange,\r\n}) => {\r\n  return (\r\n    <Draggable\r\n      cancel='.note form>*'\r\n      position={ note.position }\r\n      bounds='parent'\r\n      onStop={ saveNote(note) }\r\n      onDrag={ handleDrag(note) }\r\n    >\r\n      <div className='note'>\r\n        <Notification message={ note.notification } />\r\n        <form onSubmit={ saveNote(note) }>\r\n          <h3>\r\n            <TextareaAutosize\r\n              onBlur={ saveNote(note) }\r\n              onResize={(e) => {}}\r\n              value={ note.title }\r\n              name=\"title\"\r\n              placeholder='Title'\r\n              onChange={ handleInputChange(note) }\r\n            />\r\n            <span className='border'></span>\r\n          </h3>\r\n          <Date date={ note.date } />\r\n          <p>\r\n            <TextareaAutosize\r\n              onBlur={ saveNote(note) }\r\n              onResize={(e) => {}}\r\n              value={ note.content }\r\n              name=\"content\"\r\n              placeholder='Add text here'\r\n              onChange={ handleInputChange(note) }\r\n            />\r\n            <span className='border'></span>\r\n          </p>\r\n          <Delete note={ note } handleRemove={ handleRemove } />\r\n        </form>\r\n      </div>\r\n    </Draggable>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react'\r\nimport Note from './Note'\r\n\r\nconst Notes = ({\r\n  notes,\r\n  handleRemove,\r\n  handleDrag,\r\n  saveNote,\r\n  handleInputChange\r\n}) => {\r\n  return (\r\n    <div id='notes'>\r\n      { notes.map(note =>\r\n        <Note\r\n          key={ note.id }\r\n          note={ note }\r\n          handleRemove={ handleRemove }\r\n          handleDrag={ handleDrag }\r\n          saveNote={ saveNote }\r\n          handleInputChange={ handleInputChange }\r\n        />\r\n      ) }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notes","import axios from 'axios'\nconst baseUrl = '/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (note) => {\n  const request = axios.post(baseUrl, note)\n  return request.then(response => response.data)\n}\n\nconst update = (note) => {\n  const request = axios.put(`${baseUrl}/${note.id}`, note)\n  return request.then(response => response.data)\n}\n\nconst remove = (note) => {\n  const request = axios.delete(`${baseUrl}/${note.id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { Component } from 'react'\r\nimport FilterNotes from './components/FilterNotes.js'\r\nimport Notes from './components/Notes.js'\r\nimport noteService from './services/notes.js'\r\nimport update from 'immutability-helper'\r\nimport ReactGA from 'react-ga'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      notes: [],\r\n      filter: '',\r\n      username: '',\r\n      password: '',\r\n      user: null\r\n    }\r\n  }\r\n\r\n  // set notification to null after timeout\r\n  hideNotification = (note) => {\r\n    const timeout = 3000\r\n    setTimeout(() => {\r\n      const index = this.state.notes.findIndex(n => n.id === note.id)\r\n      // if note not found, index will be -1\r\n      if (index >= 0) {\r\n        const notes = update(this.state.notes, {\r\n          [index]: { ['notification']: { $set: null } }\r\n        })\r\n        this.setState({ notes: notes })\r\n      }\r\n    }, timeout)\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = 'NoteOwl'\r\n    noteService\r\n      .getAll()\r\n      .then(notes => { this.setState({ notes: notes }) })\r\n    ReactGA.initialize('UA-120584024-4')\r\n    ReactGA.pageview('/')\r\n  }\r\n\r\n  login = (event) => {\r\n    event.preventDefault()\r\n  }\r\n\r\n  newNote = () => {\r\n    if (!this.state.notes.find(n => n.id === 0)) {\r\n      const note = {\r\n        id: 0,\r\n        title: '',\r\n        content: '',\r\n        created: null,\r\n        updated: null,\r\n        important: false,\r\n        notification: null,\r\n        position: {\r\n          x: 0,\r\n          y: 0\r\n        }\r\n      }\r\n      this.setState({ notes: this.state.notes.concat(note) })\r\n    }\r\n  }\r\n\r\n  saveNote = (note) => () => {\r\n    if (!note.author) {\r\n      if (note.title && note.content) {\r\n        if (note.id === 0) {\r\n          noteService\r\n            .create(note)\r\n            .then(createdNote => {\r\n              createdNote.notification = 'Note saved'\r\n              const notes = this.state.notes.filter(n => n.id !== 0)\r\n              this.setState({ notes: notes.concat(createdNote) })\r\n              this.hideNotification(createdNote)\r\n            })\r\n            .catch(error => { console.log(error) })\r\n        } else {\r\n          noteService\r\n            .update(note)\r\n            .then(updatedNote => {\r\n              updatedNote.notification = 'Note saved'\r\n              const notes = this.state.notes.filter(n => n.id !== updatedNote.id)\r\n              this.setState({ notes: notes.concat(updatedNote) })\r\n              this.hideNotification(updatedNote)\r\n            })\r\n            .catch(error => { console.log(error) })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleRemove = (note) => () => {\r\n    if (!note.author) {\r\n      if (window.confirm('Are you sure you want to remove this note?')) {\r\n        if (note.id === 0) {\r\n          const notes = this.state.notes.filter(n => n.id !== note.id)\r\n          this.setState({ notes: notes })          \r\n        } else {\r\n          noteService\r\n            .remove(note)\r\n            .then(response => {\r\n              const notes = this.state.notes.filter(n => n.id !== note.id)\r\n              this.setState({ notes: notes })\r\n            })\r\n            .catch(error => {\r\n              console.log(error)\r\n              const notes = this.state.notes.filter(n => n.id !== note.id)\r\n              this.setState({ notes: notes })\r\n            })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleDrag = (note) => (event, ui) => {\r\n    const notes = this.state.notes.filter(n => n.id !== note.id)\r\n    if (!note.position) {\r\n      note.position = {\r\n        x: 0,\r\n        y: 0\r\n      }\r\n    }\r\n    note.position = {\r\n      x: +note.position.x + +ui.deltaX.toFixed(0),\r\n      y: +note.position.y + +ui.deltaY.toFixed(0)\r\n    }\r\n    this.setState({ notes: notes.concat(note) })\r\n  }\r\n\r\n  handleInputChange = (note) => {\r\n    return (event) => {\r\n      const value = event.target.value\r\n      const name = event.target.name\r\n      if (note) {\r\n        const index = this.state.notes.findIndex(n => n.id === note.id)\r\n        const notes = update(this.state.notes, {\r\n          [index]: { [name]: { $set: value } }\r\n        })\r\n        this.setState({ notes: notes })\r\n      } else {\r\n        this.setState({ [name]: value })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const notes = this.state.notes.filter(note =>\r\n      note.title.toLowerCase().includes(this.state.filter.toLowerCase()) ||\r\n      note.content.toLowerCase().includes(this.state.filter.toLowerCase())\r\n    )\r\n    return (\r\n      <div id='content'>\r\n        <nav>\r\n          <h1>\r\n            Noteowl\r\n          </h1>\r\n          <button onClick={ this.newNote }>\r\n            Add New Note\r\n          </button>\r\n          <FilterNotes\r\n            filterValue={ this.state.filter }\r\n            handleInputChange={ this.handleInputChange }\r\n          />\r\n          <form onSubmit={ this.login }>\r\n            <input\r\n              type='text'\r\n              placeholder='Username'\r\n              name='username'\r\n              value={ this.state.username }\r\n              onChange={ this.handleInputChange(null) }\r\n            />\r\n            <input\r\n              type='password'\r\n              placeholder='Password'\r\n              name='password'\r\n              value={ this.state.password }\r\n              onChange={ this.handleInputChange(null) }\r\n            />\r\n            <button type='submit'>Login</button>\r\n          </form>\r\n        </nav>\r\n        <Notes\r\n          notes={ notes }\r\n          handleRemove={ this.handleRemove }\r\n          handleDrag={ this.handleDrag }\r\n          saveNote={ this.saveNote }\r\n          handleInputChange={ this.handleInputChange }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()"],"sourceRoot":""}