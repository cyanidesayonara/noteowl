{"version":3,"sources":["components/Notification.js","components/Note.js","components/Notes.js","services/notes.js","App.js","serviceWorker.js","index.js"],"names":["Notification","_ref","message","console","log","undefined","react_default","a","createElement","className","Note","note","handleRemove","saveNote","handleInputChange","position","react_draggable_default","cancel","bounds","onStop","components_Notification","notification","onSubmit","lib_default","onBlur","onResize","e","value","title","placeholder","onChange","content","type","onClick","Notes","notes","id","map","components_Note","key","services_notes","getAll","axios","get","then","response","data","create","newObject","post","update","updatedObject","put","concat","remove","delete","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newNote","state","find","n","setState","author","date","important","event","preventDefault","noteService","createdNote","filter","notifications","setTimeout","catch","error","updatedNote","index","findIndex","defineProperty","$set","window","confirm","removedNote","prop","target","newState","_this2","document","_this3","toLowerCase","includes","components_Notes","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ffbdb74.chunk.js","sourcesContent":["import React from 'react'\n\nconst Notification = ({ message }) => {\n  console.log(message === undefined)\n  console.log(message)\n  if (message === undefined) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      { message }\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react'\nimport TextareaAutosize from 'react-autosize-textarea'\nimport Draggable from 'react-draggable'\nimport Notification from './Notification.js'\n\nconst Note = ({\n  note,\n  handleRemove,\n  saveNote,\n  handleInputChange,\n  position,\n}) => {\n  return (\n    <Draggable\n      cancel='form>*'\n      bounds='parent'\n      onStop={ saveNote(note) }\n    >\n      <div className='note'>\n        <Notification\n          message={ note.notification }\n        />     \n        <form onSubmit={ saveNote(note) }>\n          <h3>\n            <TextareaAutosize onBlur={ saveNote(note) } onResize={(e)=>{}} value={ note.title } placeholder=\"Title\" onChange={ handleInputChange('title', note) } />\n            <span className=\"border\"></span>\n          </h3>\n          <p>\n            <TextareaAutosize onBlur={ saveNote(note) } onResize={(e)=>{}} value={ note.content } placeholder=\"Add text here\" onChange={ handleInputChange('content', note) } />\n            <span className=\"border\"></span>\n          </p>\n          <button type='submit'>\n            Save\n          </button>\n          <button type='button' onClick={ handleRemove(note) }>\n            Delete\n          </button>\n        </form>\n      </div>\n    </Draggable>\n  )\n}\n\nexport default Note","import React from 'react';\r\nimport Note from './Note.js'\r\n\r\nconst Notes = ({\r\n  notes,\r\n  handleRemove,\r\n  saveNote,\r\n  handleInputChange\r\n}) => {\r\n  return (\r\n    <div id='notes'>\r\n      { notes.map(note =>\r\n        <Note\r\n          key={ note.id }\r\n          note={ note }\r\n          handleRemove={ handleRemove }\r\n          saveNote={ saveNote }\r\n          handleInputChange={ handleInputChange }\r\n        />\r\n      ) }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notes","import axios from 'axios'\nconst baseUrl = '/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, updatedObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, updatedObject)\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { Component } from 'react'\nimport FilterNotes from './components/FilterNotes.js'\nimport Notes from './components/Notes.js'\nimport noteService from './services/notes.js'\nimport update from 'immutability-helper'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      notes: [],\n      filter: '',\n      notifications: {}\n    }\n  }\n\n  componentDidMount() {\n    document.title = 'NoteOwl'\n    noteService\n      .getAll()\n      .then(notes => {\n        this.setState({ notes: notes })\n      })\n  }\n\n  newNote = () => {\n    if (!this.state.notes.find(n => n.id === 0)) {\n      const note = {\n        id: 0,\n        title: '',\n        author: '',\n        content: '',\n        date: '',\n        important: false\n      }\n      this.setState({\n        notes: [note].concat(this.state.notes)\n      })\n    }\n  }\n\n  saveNote = (note) => (event) => {\n    event.preventDefault()\n    if (note.id === 0) {\n      noteService\n        .create(note)\n        .then(createdNote => {\n          let notes = this.state.notes.filter(n => n.id !== 0)\n          notes = [createdNote].concat(notes)\n          let notifications = this.state.notifications\n          notifications[createdNote.id] = 'Note saved'\n          this.setState({\n            notes: notes,\n            notifications: notifications\n          })\n          console.log(notifications)\n          setTimeout(() => {\n            let notifications = this.state.notifications\n            delete notifications[createdNote.id]\n            this.setState({\n              notifications: notifications\n            })\n          }, 3000)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    } else {\n      noteService\n        .update(note.id, note)\n        .then(updatedNote => {\n          let notifications = this.state.notifications\n          notifications[updatedNote.id] = 'Note saved'\n          const index = this.state.notes.findIndex(n => n.id === updatedNote.id)\n          const notes = update(this.state.notes, {\n            [index]: {\n              $set: updatedNote\n            }\n          })\n          this.setState({\n            notes: notes,\n            notifications: notifications\n          })\n          console.log(this.state.notifications)\n          setTimeout(() => {\n            let notifications = this.state.notifications\n            delete notifications[updatedNote.id]\n            this.setState({\n              notifications: notifications\n            })\n          }, 3000)\n        })\n        .catch(error => {\n          console.log(error)\n        })\n    }\n\n  }\n\n  handleRemove = (note) => () => {\n    if (window.confirm('Are you sure you want to remove this note?')) {\n      noteService\n        .remove(note.id)\n        .then(removedNote => {\n          const notes = this.state.notes.filter(n => n.id !== note.id)\n          this.setState({\n            notes: notes,\n          })\n          setTimeout(() => {\n            this.setState({ notification: null })\n          }, 3000)\n        })\n        .catch(error => {\n          console.log(error)\n          const notes = this.state.notes.filter(n => n.id !== note.id)\n          this.setState({\n            notes: notes,\n          })\n          setTimeout(() => {\n            this.setState({ notification: null })\n          }, 3000)\n        })\n    }\n  }\n\n  handleInputChange = (prop, note) => {\n    return (event) => {\n      const value = event.target.value\n      if (note) {\n        const index = this.state.notes.findIndex(n => n.id === note.id)\n        const newState = update(this.state, {\n          notes: {\n            [index]: {\n              [prop]: { $set: value }\n            }\n          }\n        })\n        this.setState(newState)\n      } else {\n        this.setState({ [prop]: value })\n      }\n    }\n  }\n\n  render() {\n    const notes = this.state.notes.filter(note =>\n      note.title.toLowerCase().includes(this.state.filter.toLowerCase()) ||\n      note.author.toLowerCase().includes(this.state.filter.toLowerCase()) ||\n      note.content.toLowerCase().includes(this.state.filter.toLowerCase())\n    )\n    return (\n      <div id=\"content\">\n        <nav>\n          <h1>\n            Noteowl\n          </h1>\n          <button onClick={ this.newNote }>\n            Add New Note\n          </button>\n{/*           <FilterNotes\n            filterValue={ this.state.filter }\n            handleFilterChange={ this.handleInputChange('filter', undefined) }\n          /> */}\n        </nav>\n        <Notes\n          notes={ notes }\n          handleRemove={ this.handleRemove }\n          saveNote={ this.saveNote }\n          handleInputChange={ this.handleInputChange }\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}