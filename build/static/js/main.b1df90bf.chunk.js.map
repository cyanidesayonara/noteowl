{"version":3,"sources":["components/Notification.js","components/AddNewNote.js","components/FilterNotes.js","components/Note.js","components/Notes.js","services/notes.js","App.js","serviceWorker.js","index.js"],"names":["Notification","_ref","message","react_default","a","createElement","className","AddNewNote","titleValue","authorValue","contentValue","handleSubmit","handleTitleChange","handleAuthorChange","handleContentChange","onSubmit","value","onChange","type","FilterNotes","filterValue","handleFilterChange","placeholder","Note","title","author","date","content","handleRemove","onClick","Notes","notes","map","note","components_Note","key","id","services_notes","getAll","axios","get","then","response","data","create","newObject","post","update","updatedObject","put","concat","remove","delete","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNewNote","event","preventDefault","newNote","state","newTitle","newAuthor","newContent","Date","toLocaleString","important","noteService","setState","notification","setTimeout","window","confirm","removednote","filter","p","catch","error","newName","newNumber","handleInputChange","prop","newState","target","_this2","_this3","length","toLowerCase","includes","components_FilterNotes","components_Notification","components_AddNewNote","components_Notes","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1df90bf.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"error\">\r\n      { message }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react';\r\n\r\nconst AddNewNote = ({ titleValue, authorValue, contentValue, handleSubmit, handleTitleChange, handleAuthorChange, handleContentChange }) => {\r\n  return (\r\n    <div className=\"note\">\r\n      <form onSubmit={ handleSubmit }>\r\n        <span>\r\n          Title:\r\n        </span>\r\n        <input value={ titleValue } onChange={ handleTitleChange } />\r\n        <span>\r\n          Author:\r\n        </span>\r\n        <input value={ authorValue } onChange={ handleAuthorChange } />\r\n        <span>\r\n          Text:\r\n        </span>\r\n        <textarea value={ contentValue } onChange={ handleContentChange }>\r\n        </textarea>\r\n        <button type=\"submit\">\r\n          Add Note\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddNewNote","import React from 'react';\r\n\r\nconst FilterNotes = ({ filterValue, handleFilterChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        placeholder=\"Filter notes\"\r\n        value={ filterValue }\r\n        onChange={ handleFilterChange }\r\n      />\r\n    </div>         \r\n  )\r\n}\r\n\r\nexport default FilterNotes","import React from 'react';\r\n\r\nconst Note = ({ title, author, date, content, handleRemove }) => {\r\n  return (\r\n    <li className=\"note\">\r\n      <h2>\r\n        Title: { title }\r\n      </h2>\r\n      <h3>\r\n        Author: { author }\r\n      </h3>\r\n      <h4>\r\n        Date: { date }\r\n      </h4>\r\n      <p>\r\n        { content }\r\n      </p>\r\n      <button onClick={ handleRemove }>\r\n        Delete\r\n      </button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react';\r\nimport Note from './Note.js'\r\n\r\nconst Notes = ({ notes, handleRemove }) => {\r\n  return (\r\n    <ul>\r\n      { notes.map(note => \r\n        <Note\r\n          key={ note.id }\r\n          title={ note.title }\r\n          author={ note.author } \r\n          date={ note.date }\r\n          content={ note.content }\r\n          handleRemove={ handleRemove(note) }\r\n        /> \r\n      ) }\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Notes","import axios from 'axios'\r\nconst baseUrl = '/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, updatedObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, updatedObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React, { Component } from 'react';\nimport Notification from './components/Notification.js'\nimport AddNewNote from './components/AddNewNote.js'\nimport FilterNotes from './components/FilterNotes.js'\nimport Notes from './components/Notes.js'\nimport noteService from './services/notes.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      notes: [],\n      newTitle: '',\n      newAuthor: '',\n      newContent: '',\n      filter: '',\n      notification: null\n    }\n  }\n\n  componentDidMount() {\n    noteService\n      .getAll()\n      .then(notes => {\n        this.setState({ \n          notes: notes\n         })\n      })\n  }\n\n  addNewNote = ( event ) => {\n    event.preventDefault()\n    const newNote = {\n      title: this.state.newTitle,\n      author: this.state.newAuthor,\n      content: this.state.newContent,\n      date: new Date().toLocaleString(),\n      important: true\n    }\n    noteService\n      .create(newNote)\n      .then(newNote => {\n        this.setState({\n          notes: this.state.notes.concat(newNote),\n          newTitle: '',\n          newAuthor: '',\n          newContent: '',\n          notification: `Note added`\n        })\n        setTimeout(() => {\n          this.setState({\n            notification: null\n          })\n        }, 3000)\n      })\n  }\n\n  handleRemove = (note) => {\n    return () => {\n      if (window.confirm(`Are you sure you want to remove this note?`)) {\n        noteService\n          .remove(note.id)\n          .then(removednote => {\n            const notes = this.state.notes.filter(p => p.id !== note.id)\n            this.setState({\n              notes: notes,\n              newTitle: '',\n              newAuthor: '',\n              newContent: '',\n              notification: `Note removed`\n            })\n            setTimeout(() => {\n              this.setState({\n                notification: null\n              })\n            }, 3000)\n          })\n          .catch(error => {\n            const notes = this.state.notes.filter(p => p.id !== note.id)\n            this.setState({\n              notes: notes,\n              newName: '',\n              newNumber: '',\n              notification: `Failed to remove note`\n            })\n            setTimeout(() => {\n              this.setState({\n                notification: null\n              })\n            }, 3000)\n          })\n      }\n    }\n  }\n\n  handleInputChange = (prop) => {\n    return (event) => {\n      let newState = {}\n      newState[prop] = event.target.value\n      this.setState(newState)\n    }\n  }\n  render() {\n    if (this.state.notes.length) {\n      const notes = this.state.notes.filter(note => \n        note.title.toLowerCase().includes(this.state.filter.toLowerCase()) ||\n        note.author.toLowerCase().includes(this.state.filter.toLowerCase()) ||\n        note.content.toLowerCase().includes(this.state.filter.toLowerCase()))\n      return (\n        <div id=\"content\">\n          <nav>\n            <h1>\n              Noteowl\n            </h1>\n            <button>\n              Add New Note\n            </button>\n            <FilterNotes\n              filterValue={ this.state.filter }\n              handleFilterChange={ this.handleInputChange(\"filter\") }\n            />\n          </nav>\n          <div id=\"notes\">\n            <Notification\n              message={ this.state.notification }\n            />\n            <AddNewNote\n              titleValue = { this.state.newTitle }\n              authorValue = { this.state.newAuthor }\n              contentValue = { this.state.newContent }\n              handleSubmit={ this.addNewNote }\n              handleTitleChange = { this.handleInputChange(\"newTitle\") }\n              handleAuthorChange={ this.handleInputChange(\"newAuthor\") }\n              handleContentChange={ this.handleInputChange(\"newContent\") }\n            />\n            <Notes\n              notes={ notes }\n              handleRemove={ this.handleRemove }\n            />\n          </div>\n        </div>\n      )\n    }\n    else {\n      return (\n        <div>\n          <nav>\n            <h1>\n              Noteowl\n            </h1>\n            <button>\n              Add New Note\n            </button>\n            <FilterNotes\n              filterValue={ this.state.filter }\n              handleFilterChange={ this.handleInputChange(\"filter\") }\n            />\n          </nav>\n          <AddNewNote />\n        </div>\n      )      \n    }\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}