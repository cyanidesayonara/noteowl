{"version":3,"sources":["components/Notification.js","components/Note.js","components/Notes.js","services/notes.js","App.js","serviceWorker.js","index.js"],"names":["Notification","_ref","message","react_default","a","createElement","className","Note","note","handleRemove","handleSubmit","handleInputChange","position","react_draggable_default","defaultClassName","cancel","bounds","onSubmit","lib_default","onResize","e","value","title","placeholder","onChange","content","type","onClick","Notes","notification","notes","id","components_Notification","map","components_Note","key","services_notes","getAll","axios","get","then","response","data","create","newObject","post","update","updatedObject","put","concat","remove","delete","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","newNote","state","find","n","setState","author","date","important","saveNote","event","preventDefault","noteService","createdNote","filter","setTimeout","catch","error","console","log","updatedNote","index","findIndex","newState","defineProperty","$set","window","confirm","removedNote","prop","target","_this2","document","_this3","toLowerCase","includes","components_Notes","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9733e7b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"error\">\r\n      { message }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React from 'react';\r\nimport TextareaAutosize from 'react-autosize-textarea';\r\nimport Draggable from 'react-draggable';\r\n\r\nconst Note = ({\r\n  note,\r\n  handleRemove,\r\n  handleSubmit,\r\n  handleInputChange,\r\n  position\r\n}) => {\r\n  return (\r\n    <Draggable\r\n      defaultClassName='note'\r\n      cancel='form'\r\n      bounds='parent'\r\n    >\r\n      <div>\r\n        <form onSubmit={ handleSubmit(note) }>\r\n          <h3>\r\n            <TextareaAutosize onResize={(e)=>{}} value={ note.title } placeholder=\"Title\" onChange={ handleInputChange('title', note) } />\r\n            <span className=\"border\"></span>\r\n          </h3>\r\n          <p>\r\n            <TextareaAutosize onResize={(e)=>{}} value={ note.content } placeholder=\"Add text here\" onChange={ handleInputChange('content', note) } />\r\n            <span className=\"border\"></span>\r\n          </p>\r\n          <button type='submit'>\r\n            Save\r\n          </button>\r\n          <button type='button' onClick={ handleRemove(note) }>\r\n            Delete\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </Draggable>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react';\r\nimport Notification from './Notification.js'\r\nimport Note from './Note.js'\r\n\r\nconst Notes = ({\r\n  notification,\r\n  notes,\r\n  handleRemove,\r\n  handleSubmit,\r\n  handleInputChange\r\n}) => {\r\n  return (\r\n    <div id='notes'>\r\n      <Notification\r\n        message={ notification }\r\n      />\r\n      { notes.map(note =>\r\n        <Note\r\n          key={ note.id }\r\n          note={ note }\r\n          handleRemove={ handleRemove }\r\n          handleSubmit={ handleSubmit }\r\n          handleInputChange={ handleInputChange }\r\n        />\r\n      ) }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notes","import axios from 'axios'\r\nconst baseUrl = '/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, updatedObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, updatedObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React, { Component } from 'react';\r\nimport FilterNotes from './components/FilterNotes.js'\r\nimport Notes from './components/Notes.js'\r\nimport noteService from './services/notes.js'\r\nimport update from 'immutability-helper';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      notes: [],\r\n      filter: '',\r\n      notification: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.title = 'NoteOwl'\r\n    noteService\r\n      .getAll()\r\n      .then(notes => {\r\n        this.setState({ notes: notes })\r\n      })\r\n  }\r\n\r\n  newNote = () => {\r\n    if (!this.state.notes.find(n => n.id === 0)) {\r\n      const note = {\r\n        id: 0,\r\n        title: '',\r\n        author: '',\r\n        content: '',\r\n        date: '',\r\n        important: false\r\n      }\r\n      this.setState({\r\n        notes: [note].concat(this.state.notes)\r\n      })\r\n    }\r\n  }\r\n\r\n  saveNote = (note) => (event) => {\r\n    event.preventDefault()\r\n    if (note.id === 0) {\r\n      noteService\r\n        .create(note)\r\n        .then(createdNote => {\r\n          const notes = this.state.notes.filter(n => n.id !== 0)\r\n          this.setState({\r\n            notes: [createdNote].concat(notes),\r\n            notification: 'Note saved'\r\n          })\r\n          setTimeout(() => {\r\n            this.setState({\r\n              notification: null\r\n            })\r\n          }, 3000)\r\n        })\r\n        .catch(error => {\r\n          console.log(error)\r\n        })\r\n    } else {\r\n      noteService\r\n        .update(note.id, note)\r\n        .then(updatedNote => {\r\n          const index = this.state.notes.findIndex(n => n.id === updatedNote.id)\r\n          const newState = update(this.state, {\r\n            notes: {\r\n              [index]: {\r\n                $set: updatedNote\r\n              }\r\n            }\r\n          })\r\n          this.setState({\r\n            newState,\r\n            notification: 'Note saved'\r\n          })\r\n          setTimeout(() => {\r\n            this.setState({\r\n              notification: null\r\n            })\r\n          }, 3000)\r\n        })\r\n        .catch(error => {\r\n          console.log(error)\r\n        })\r\n    }\r\n\r\n  }\r\n\r\n  handleRemove = (note) => () => {\r\n    if (window.confirm('Are you sure you want to remove this note?')) {\r\n      noteService\r\n        .remove(note.id)\r\n        .then(removedNote => {\r\n          const notes = this.state.notes.filter(n => n.id !== note.id)\r\n          this.setState({\r\n            notes: notes,\r\n            notification: 'Note deleted'\r\n          })\r\n          setTimeout(() => {\r\n            this.setState({ notification: null })\r\n          }, 3000)\r\n        })\r\n        .catch(error => {\r\n          console.log(error)\r\n          const notes = this.state.notes.filter(n => n.id !== note.id)\r\n          this.setState({\r\n            notes: notes,\r\n            notification: 'Note deleted'\r\n          })\r\n          setTimeout(() => {\r\n            this.setState({ notification: null })\r\n          }, 3000)\r\n        })\r\n    }\r\n  }\r\n\r\n  handleInputChange = (prop, note) => {\r\n    return (event) => {\r\n      const value = event.target.value\r\n      if (note) {\r\n        const index = this.state.notes.findIndex(n => n.id === note.id)\r\n        const newState = update(this.state, {\r\n          notes: {\r\n            [index]: {\r\n              [prop]: { $set: value }\r\n            }\r\n          }\r\n        })\r\n        this.setState(newState)\r\n      } else {\r\n        this.setState({ [prop]: value })\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const notes = this.state.notes.filter(note =>\r\n      note.title.toLowerCase().includes(this.state.filter.toLowerCase()) ||\r\n      note.author.toLowerCase().includes(this.state.filter.toLowerCase()) ||\r\n      note.content.toLowerCase().includes(this.state.filter.toLowerCase())\r\n    )\r\n    return (\r\n      <div id=\"content\">\r\n        <nav>\r\n          <h1>\r\n            Noteowl\r\n          </h1>\r\n          <button onClick={ this.newNote }>\r\n            Add New Note\r\n          </button>\r\n{/*           <FilterNotes\r\n            filterValue={ this.state.filter }\r\n            handleFilterChange={ this.handleInputChange('filter', undefined) }\r\n          /> */}\r\n        </nav>\r\n        <Notes\r\n          notification={ this.state.notification }\r\n          notes={ notes }\r\n          handleRemove={ this.handleRemove }\r\n          handleSubmit={ this.saveNote }\r\n          handleInputChange={ this.handleInputChange }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}